;;; mis/code/comment.el -*- lexical-binding: t; -*-

;;----------------------------------------HELP!
;;--         My fancy header generator is broken...                   --
;;------------------------------------------------------------------------------

(require 'subr-x)
;; Want s.el for `s-trim', but don't want to require as we use other
;; parts of mis very early in init before packages.
;; (require 's)
;; Or do we want to implement a string manip lib ourselves?
;; Or do we want to be a package and thus have to be after packages are loaded?
;;   - Probably this one...

;; (require 'mis-parts)
;; (require 'mis-center)


;;------------------------------------------------------------------------------
;; Consts & Vars
;;------------------------------------------------------------------------------

(defcustom mis/custom.comment/border-adjustments
  ;; pycodestyle E265: block comments should start with '# '.
  '((python-mode " ")) ;; "# " as border for e.g. "# ---" instead of "#---".
  "Adjustments to `mis/comment/borders' per mode.
e.g. python-mode can ask for a space after it's comment to ensure
pylint is happier w/ wrapped or centered comments generated by
these functions.
"
  :group 'mis
  :type '(alist :key-type symbol :value-type string))


;;------------------------------------------------------------------------------
;; Helpers
;;------------------------------------------------------------------------------

(defun -m//comment/ignore ()
  "Guesses whether to ignore everything based on Emacs' comment-* vars/funcs.
"
  ;; first try: if comment-start is null, ignore.
  (null comment-start))


(defmacro -m//comment/unless (&rest body)
  "Runs BODY forms if `-m//comment/ignore' is non-nil.
"
  (declare (indent defun))
  `(unless (-m//comment/ignore)
     ,@body))


(defun -m//comment/borders (&optional with-adjustments)
  "Gets comment prefix/postfix appropriate for mode. Returns a
parts list like e.g. elisp-mode: (\";;\" nil)
"
  (-m//comment/unless
    (let* ((adjustment
            (if with-adjustments
                (nth 1 (assoc major-mode
                              mis/custom.comment/border-adjustments))
              nil))
           (pad-more (comment-add nil))
           ;; pad and trim as applicable
           (prefix   (comment-padright comment-start pad-more))
           (prefix   (if (stringp prefix) (string-trim-right prefix) prefix))
           (postfix  (comment-padleft comment-end pad-more))
           (postfix  (if (stringp postfix) (string-trim-left postfix) postfix))
           ;; if we have an adjustment, add it onto the insides of borders
           (prefix   (concat prefix (if (and prefix adjustment)
                                        adjustment)))
           (postfix  (concat (if (and postfix adjustment) adjustment)
                             postfix)))

      ;; and return
      (list prefix postfix))))
;; (-m//comment/borders)
;; (nth 0 (-m//comment/borders))
;; (nth 1 (-m//comment/borders))
;; (length (nth 1 (-m//comment/borders)))


;;------------------------------------------------------------------------------
;; Wrap string into comment chars.
;;------------------------------------------------------------------------------

(defun mis/comment/wrap (arg &optional trim concat-sep border-adj)
  "Turns ARG into a string and then into a proper comment based
on mode (uses `comment-*' emacs functions).

If CONCAT-SEP is non-nil, use it instead of a space.

Passes BORDER-ADJ to `mis/comment/borders' as
WITH-ADJUSTMENTS arg.

If TRIM is non-nil, trims resultant string before returning.
"
  (-m//comment/unless
    (let* ((string (if (stringp arg) arg (format "%s" arg)))
           (concat-sep (or concat-sep " "))
           (comment-parts (-m//comment/borders border-adj))
           (prefix (nth 0 comment-parts))
           (postfix (nth 1 comment-parts))
           (comment (mapconcat 'identity
                               (list prefix string postfix) concat-sep)))
      (if trim
          (string-trim comment)
        comment))))
;; (mis/comment/wrap "foo")
;; (mis/comment/wrap "foo" t)
;; (mis/comment/wrap "---" nil "")
;; (mis/comment/wrap "")
;; (mis/comment/wrap (make-string 3 ?-) t "")
;; (mis/comment/wrap (make-string 3 ?-) t "" t)


;;------------------------------------------------------------------------------
;; The End.
;;------------------------------------------------------------------------------
(provide 'mis/code/comment)
